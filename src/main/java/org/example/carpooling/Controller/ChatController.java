package org.example.carpooling.Controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.servlet.http.HttpServletRequest;
import org.example.carpooling.Dto.ChatMessageDTO;
import org.example.carpooling.Dto.ChatMessagePayload;
import org.example.carpooling.Entity.ChatMessage;
import org.example.carpooling.Entity.Users;
import org.example.carpooling.Helper.JwtUtil;
import org.example.carpooling.Payload.ApiResponse;
import org.example.carpooling.Repository.ChatMessageRepository;
import org.example.carpooling.Repository.UserRepository;
import org.example.carpooling.Service.ChatMessageService;
import org.example.carpooling.Service.RedisService.RedisChatPublisher;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.messaging.handler.annotation.DestinationVariable;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.*;

@CrossOrigin("*")
@RestController
@RequestMapping("/api")
@Tag(name = "Chat", description = "API qu·∫£n l√Ω tin nh·∫Øn v√† ph√≤ng chat")
public class ChatController {
    @Autowired
    private ChatMessageService chatMessageService;

    @Autowired
    private JwtUtil jwtUtil;

    @Autowired
    private SimpMessagingTemplate simpMessagingTemplate;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private ChatMessageRepository chatMessageRepository;

    @Autowired
    private RedisTemplate<String, Object> redisTemplate;

    @Autowired
    private RedisChatPublisher redisChatPublisher;

    @Operation(summary = "X·ª≠ l√Ω tin nh·∫Øn WebSocket", 
            description = "X·ª≠ l√Ω tin nh·∫Øn g·ª≠i qua WebSocket, l∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu v√† ph√°t h√†nh qua Redis")
    @MessageMapping("/chat/{roomId}")
    @SendTo("/topic/chat/{roomId}")
    public ChatMessageDTO processMessage(
            @Parameter(description = "ID c·ªßa ph√≤ng chat") 
            @DestinationVariable String roomId, 
            @Parameter(description = "N·ªôi dung tin nh·∫Øn") 
            ChatMessageDTO messageDTO) {
        try {
            String token = messageDTO.getToken();
            if (token == null || token.isEmpty()) return null;

            String email = jwtUtil.extractUsername(token);
            if (email == null) return null;

            Optional<Users> senderOpt = userRepository.findByEmail(email);
            if (!senderOpt.isPresent()) return null;

            Users sender = senderOpt.get();

            // G√°n th√¥ng tin ƒë·∫ßy ƒë·ªß v√†o DTO
            messageDTO.setSenderEmail(email);
            messageDTO.setSenderName(sender.getFullName());
            messageDTO.setTimestamp(LocalDateTime.now());
            messageDTO.setRoomId(roomId);
            messageDTO.setRead(false);

            // L∆∞u DB
            ChatMessage saved = chatMessageService.save(new ChatMessage(messageDTO));

            // Publish sang Redis (ch·ªâ 1 l·∫ßn ·ªü ƒë√¢y th√¥i)
            ChatMessagePayload payload = new ChatMessagePayload(
                    saved.getRoomId(),
                    saved.getSenderEmail(),
                    saved.getReceiverEmail(),
                    saved.getContent(),
                    saved.getTimestamp(),
                    saved.isRead()
            );
            redisChatPublisher.publish(payload);
            System.out.println("üîå Spring Boot: Received message for room: " + roomId);
            System.out.println("üîå Spring Boot: Message content: " + messageDTO.getContent());
            System.out.println("üîå Spring Boot: Sender: " + messageDTO.getSenderEmail());

            // ... existing code ...

            System.out.println("üîå Spring Boot: Sending to topic: /topic/chat/" + roomId);
            System.out.println("üîå Spring Boot: Message to send: " + messageDTO.getContent());

            return messageDTO;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    @Operation(summary = "L·∫•y tin nh·∫Øn c·ªßa ph√≤ng chat", 
            description = "Tr·∫£ v·ªÅ danh s√°ch tin nh·∫Øn c·ªßa m·ªôt ph√≤ng chat c·ª• th·ªÉ")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "L·∫•y tin nh·∫Øn th√†nh c√¥ng"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "403", description = "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ph√≤ng chat"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "500", description = "L·ªói m√°y ch·ªß")
    })
    @GetMapping("/chat/{roomId}")
    public ResponseEntity<ApiResponse<List<ChatMessageDTO>>> getMessages(
            @Parameter(description = "ID c·ªßa ph√≤ng chat") 
            @PathVariable String roomId, 
            @Parameter(description = "HTTP request ch·ª©a JWT token") 
            HttpServletRequest request) {
        try {
            String token = jwtUtil.extractTokenFromRequest(request);
            String email = jwtUtil.extractUsername(token);

            if (!roomId.contains(email)) {
                return ResponseEntity.status(HttpStatus.FORBIDDEN)
                        .body(new ApiResponse<>(false, "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ph√≤ng chat n√†y", HttpStatus.FORBIDDEN.value(), null));
            }

            chatMessageService.markMessagesAsRead(roomId, email);
            List<ChatMessageDTO> messages = chatMessageService.getMessageDTOsByRoomId(roomId);

            return ResponseEntity.ok(new ApiResponse<>(true, "L·ªãch s·ª≠ tin nh·∫Øn", HttpStatus.OK.value(), messages));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse<>(false, "L·ªói khi l·∫•y l·ªãch s·ª≠ tin nh·∫Øn", HttpStatus.INTERNAL_SERVER_ERROR.value(), null));
        }
    }

    @Operation(summary = "L·∫•y ID ph√≤ng chat", 
            description = "T·∫°o ho·∫∑c l·∫•y ID ph√≤ng chat gi·ªØa ng∆∞·ªùi d√πng hi·ªán t·∫°i v√† m·ªôt ng∆∞·ªùi d√πng kh√°c")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "L·∫•y ID ph√≤ng chat th√†nh c√¥ng"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404", description = "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "500", description = "L·ªói m√°y ch·ªß")
    })
    @GetMapping("/chat/room/{otherUserEmail}")
    public ResponseEntity<ApiResponse<String>> getChatRoomId(
            @Parameter(description = "Email c·ªßa ng∆∞·ªùi d√πng kh√°c") 
            @PathVariable String otherUserEmail, 
            @Parameter(description = "HTTP request ch·ª©a JWT token") 
            HttpServletRequest request) {
        try {
            String token = jwtUtil.extractTokenFromRequest(request);
            String email = jwtUtil.extractUsername(token);

            Optional<Users> otherUser = userRepository.findByEmail(otherUserEmail);
            if (!otherUser.isPresent()) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND)
                        .body(new ApiResponse<>(false, "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i", HttpStatus.NOT_FOUND.value(), null));
            }

            String roomId = chatMessageService.createRoomId(email, otherUserEmail);
            return ResponseEntity.ok(new ApiResponse<>(true, "ID ph√≤ng chat", HttpStatus.OK.value(), roomId));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse<>(false, "L·ªói khi l·∫•y ID", HttpStatus.INTERNAL_SERVER_ERROR.value(), null));
        }
    }

    @Operation(summary = "ƒê√°nh d·∫•u tin nh·∫Øn ƒë√£ ƒë·ªçc", 
            description = "ƒê√°nh d·∫•u t·∫•t c·∫£ tin nh·∫Øn trong ph√≤ng chat l√† ƒë√£ ƒë·ªçc")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "ƒê√°nh d·∫•u th√†nh c√¥ng"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "500", description = "L·ªói m√°y ch·ªß")
    })
    @PutMapping("/chat/{roomId}/mark-read")
    public ResponseEntity<ApiResponse<Void>> markMessagesAsRead(
            @Parameter(description = "ID c·ªßa ph√≤ng chat") 
            @PathVariable String roomId, 
            @Parameter(description = "HTTP request ch·ª©a JWT token") 
            HttpServletRequest request) {
        try {
            String token = jwtUtil.extractTokenFromRequest(request);
            String email = jwtUtil.extractUsername(token);

            chatMessageService.markMessagesAsRead(roomId, email);
            return ResponseEntity.ok(new ApiResponse<>(true, "ƒê√£ ƒë√°nh d·∫•u tin nh·∫Øn l√† ƒë√£ ƒë·ªçc", HttpStatus.OK.value(), null));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse<>(false, "ƒê√£ ƒë√°nh d·∫•u th·∫•t b·∫°i", HttpStatus.INTERNAL_SERVER_ERROR.value(), null));
        }
    }

    @Operation(summary = "G·ª≠i tin nh·∫Øn qua HTTP", 
            description = "G·ª≠i tin nh·∫Øn qua HTTP thay v√¨ WebSocket (ch·ªß y·∫øu d√πng ƒë·ªÉ test)")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "G·ª≠i tin nh·∫Øn th√†nh c√¥ng"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "401", description = "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "500", description = "L·ªói m√°y ch·ªß")
    })
    @PostMapping("/chat/test/{roomId}")
    public ResponseEntity<ApiResponse<ChatMessageDTO>> sendViaPostman(
            @Parameter(description = "ID c·ªßa ph√≤ng chat") 
            @PathVariable String roomId, 
            @Parameter(description = "N·ªôi dung tin nh·∫Øn") 
            @RequestBody ChatMessageDTO dto, 
            @Parameter(description = "HTTP request ch·ª©a JWT token") 
            HttpServletRequest request) {
        try {
            String token = jwtUtil.extractTokenFromRequest(request);
            String email = jwtUtil.extractUsername(token);

            Optional<Users> senderOpt = userRepository.findByEmail(email);
            if (!senderOpt.isPresent()) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                        .body(new ApiResponse<>(false, "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i", HttpStatus.UNAUTHORIZED.value(), null));
            }

            dto.setSenderEmail(email);
            dto.setSenderName(senderOpt.get().getFullName());
            dto.setTimestamp(LocalDateTime.now());
            dto.setRoomId(roomId);

            chatMessageService.save(new ChatMessage(dto));
            redisChatPublisher.publish(new ChatMessagePayload(
                    dto.getRoomId(),
                    dto.getSenderEmail(),
                    dto.getReceiverEmail(),
                    dto.getContent(),
                    dto.getTimestamp(),
                    dto.isRead()
            ));
            return ResponseEntity.ok(new ApiResponse<>(true, "Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i", HttpStatus.OK.value(), dto));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse<>(false, "Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c g·ª≠i", HttpStatus.INTERNAL_SERVER_ERROR.value(), null));
        }
    }

    @Operation(summary = "L·∫•y danh s√°ch ph√≤ng chat", 
            description = "Tr·∫£ v·ªÅ danh s√°ch c√°c ph√≤ng chat c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "L·∫•y danh s√°ch th√†nh c√¥ng"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "500", description = "L·ªói m√°y ch·ªß")
    })
    @GetMapping("/chat/rooms")
    public ResponseEntity<ApiResponse<List<Map<String, Object>>>> getChatRooms(
            @Parameter(description = "HTTP request ch·ª©a JWT token") 
            HttpServletRequest request) {
        try {
            String token = jwtUtil.extractTokenFromRequest(request);
            String email = jwtUtil.extractUsername(token);

            List<String> roomIds = chatMessageRepository.findRoomIdsByUserEmail(email);
            List<Map<String, Object>> roomsList = new ArrayList<>();

            for (String roomId : roomIds) {
                ChatMessage latestMessage = chatMessageRepository.findLatestMessageByRoomId(roomId);
                if (latestMessage == null) continue;

                String partnerEmail = latestMessage.getSenderEmail().equals(email)
                        ? latestMessage.getReceiverEmail()
                        : latestMessage.getSenderEmail();

                Optional<Users> partnerOpt = userRepository.findByEmail(partnerEmail);
                String partnerName = partnerOpt.map(Users::getFullName).orElse(partnerEmail);

                Map<String, Object> roomInfo = new HashMap<>();
                roomInfo.put("roomId", roomId);
                roomInfo.put("partnerEmail", partnerEmail);
                roomInfo.put("partnerName", partnerName);
                roomInfo.put("lastMessage", latestMessage.getContent());
                roomInfo.put("lastMessageTime", latestMessage.getTimestamp().toString());
                roomInfo.put("unreadCount", chatMessageRepository.countUnreadMessages(roomId, email));

                roomsList.add(roomInfo);
            }

            roomsList.sort((room1, room2) -> ((String) room2.get("lastMessageTime")).compareTo((String) room1.get("lastMessageTime")));

            return ResponseEntity.ok(new ApiResponse<>(true, "Danh s√°ch ph√≤ng chat", HttpStatus.OK.value(), roomsList));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ApiResponse<>(false, "L·∫•y danh s√°ch ph√≤ng chat th·∫•t b·∫°i", HttpStatus.INTERNAL_SERVER_ERROR.value(), null));
        }
    }

}
